#include "dvbgen_outer_coder.hh"
#include "dvbgen_inner_coder.hh"
#include "dvbgen_inner_intrlv.hh"
#include "SDRApplication.hh"

void get_mpeg_8pck(Sigui8 &O_mpeg8pck){
  CHECK_INIT_SIG(O_mpeg8pck,8*188);

  /*--DATA Bytes--*/
  O_mpeg8pck.random(8*188);

  /*--SYNC Bytes--*/
  for(int isync = 0;isync<1503;isync+=188)
    O_mpeg8pck.val(isync) = 0x47;
}

int main_dvbgen(int argc, char **argv)
{
  enum {QPSK=2, QAM16=4, QAM64=6};

  int P_crate = DvbParam::CR23;
 
  int sz_8pck_ts    = 1504; //size in byte
  int sz_8pck_outer = 1632; 
  int sz_8pck_inner = sz_8pck_outer * (P_crate+1)/P_crate;
  int sz_inner_input= 1260; //bytes 
  int sz_inner_output= 1260*(P_crate+1)/P_crate; //bytes 
  int Nmax = 1512 ;//2K; 6048 8K //nb subcarriers
  int nqam = QAM64;//4bits, 64
  int nbit_info_hp = (int) ((float)(Nmax * nqam * P_crate) / ( (float) (P_crate+1))) ;

  /****START INIT*******/
  SDRApplication pApp;

  /****Gen mpeg 8pcks********************/
  SDRModule             *Msc_GenTs = new SDRFuncSource(&get_mpeg_8pck, sz_8pck_ts);
  //SDRModule             *Msc_GenTs = new SDRFileSource("REF/ref/random.ts", sz_8pck_ts);
  pApp.add_module(Msc_GenTs); MODULE_NAME(*Msc_GenTs);
  
  /****Scrambler + RS Encoding + Byte Interleaving*************/
  OuterCoder *C_Outer   = new OuterCoder();
  SDRModule  *M_Outer   = new SDRMethCore<OuterCoder>(C_Outer,&OuterCoder::compute,sz_8pck_ts,sz_8pck_outer);
  pApp.add_module(M_Outer); MODULE_NAME(*M_Outer);

  // /****Convolutional Encoder*************/
  InnerCoder *C_Inner   = new InnerCoder(P_crate);
  SDRModule  *M_Inner   = new SDRMethCore<InnerCoder>(C_Inner,&InnerCoder::compute,sz_inner_input, sz_inner_output);
  pApp.add_module(M_Inner ); MODULE_NAME(*M_Inner);
  
  SDRModule  *Dump2file   = new SDRFileSink("z_dump/inner.bin",sz_inner_output);
  pApp.add_module(Dump2file); MODULE_NAME(*Dump2file);


  // SDRModule  *Msk_flush = new SDRNullSink(sz_inner_output);
  // pApp.add_module(Msk_flush); MODULE_NAME(*Msk_flush);

  pApp.connect(4, Msc_GenTs, M_Outer, M_Inner, Dump2file /*Msk_flush*/);

  /****END INIT*******/
  
  LOOP(ii,100)
    {
      TIME();
      pApp.run();
      TIME("DVB MODULATION");
      DUMP(ii);
      // sleep(1);
    }


  return -1;
}

int main(int argc, char **argv)
{
  /* Input   : 4Mbits/s ==> 2660 mpeg8pcks/s           */
  /* Resource: 1.6Ghz   ==> 600.000 Cycles/mpeg8pcks   */

  // QApplication a(argc, argv);
  // SdrGui *  pGui1 = new SdrGui();
 
  // SdrThread *plot1 = new SdrThread(pGui1,&main_dvbgen);
  // plot1->start();

  // return a.exec();

  main_dvbgen(argc,argv);
  return -1;
}
